//created on: 15 nov 2024
package rule2

//list any import classes here.
import conceptos.seres.*;
import conceptos.relaciones.*;
import conceptos.objetos.*;
import conceptos.capacidades.*;
import java.util.*;
import conceptos.seres.TipoCriatura;


//declare any global variables here


// **************************REGLAS GENERALES************************** //

rule "Informar inicio"
	agenda-group "informacion"
	when
		$o: Object()//!($o instanceof Ser), !($o instanceof Objeto), !($o instanceof Capacidad))
	then
		System.out.println($o.toString());
end
 
rule "Si alguien que tenia el favor de un Dios ahora tiene su enojo -> ya no tiene el favor"
	salience 15
	agenda-group "generales"
	when
		$enojo: Enojado($dios:= sujeto, $mortal:= receptor)
		$favor: Favorece(sujeto == $dios, receptor == $mortal)
	then
		delete($favor);
		System.out.println($enojo.toString() +", por lo que no " + $favor.toString());
end

rule "x tiene el Favor de un Dios -> x tiene su inventario"
	salience 10
	agenda-group "generales"
    //include attributes such as "salience" here...
    when
        $favor: Favorece($dios:= sujeto, $mortal:= receptor)
        $pos: Posee(sujeto == $dios, $obj:= objeto)
    then
        insert(new Posee($mortal, $obj));
        delete($pos);
        System.out.println($favor.toString() +	", por lo que " + 
        	$mortal.toString() + " consigue " + $obj.toString());
end

rule "Si estabas libre y ahora estas apresado -> ya no estas libre"
	salience 15
	agenda-group "generales"
	when
		$libre: Libera($ser:= receptor)
		Apresa(receptor == $ser)
	then
		delete($libre);
end

rule "Si tu padre es Dios Mayor -> tienes su favor"
	salience 10
	agenda-group "generales"
	when
		$dios: DiosMayor()
		$mortal: Mortal()
		$relacionPadre: Padre(sujeto == $dios, receptor == $mortal)
	then
		Favorece favor = new Favorece($dios, $mortal);
		insert(favor);
		System.out.println($relacionPadre.toString() + ", por lo que " + favor.toString());
end

rule "Si tienes localizado a un muerto (que nadie haya matado) con objetos -> te puedes quedar sus objetos"
	salience 10
	agenda-group "generales"
	when
		$ser: Ser(!muerto)
		$muerto: Ser(muerto)
		not(Mata(receptor == $muerto))
		$posesionMuerto: Posee(sujeto == $muerto, $obj:= objeto)
		$localizado: Localiza(sujeto == $ser, receptor == $muerto)
	then
		Posee posee = new Posee($ser, $obj);
		insert(posee);
		delete($posesionMuerto);
		System.out.println($localizado.toString() + " y " + $muerto.toString() + " esta muerto , por lo que " +
			 posee.toString());
end

rule "x mata a y -> x tiene el inventario de y"
	salience 10
	agenda-group "generales"
	when
		$mata: Mata($asesino:= sujeto, $muerto:= receptor)
		$posesionMuerto: Posee(sujeto == $muerto, $obj:= objeto)
	then
		insert(new Posee($asesino, $obj));
		delete($posesionMuerto);
		System.out.println($mata.toString() + ", por lo que " +
			$asesino.toString() + " consigue " + $obj.toString());
end

// Voy a suponer que, cuando tres dioses te ofrecen un favor, puedes localizar aquellos que los 3 localizan.
rule "x tiene favor de tres dioses que localizan a y -> x localiza a y"
	salience 10
	agenda-group "generales"
	when
		$mortal: Mortal()
		Favorece($dios1:= sujeto, receptor == $mortal) and Localiza(sujeto == $dios1, $localizado:= receptor)
		$dioses: List(size >= 2) from
			accumulate(Favorece($dios:= sujeto, $dios != $dios1, receptor == $mortal) and Localiza(sujeto == $dios, receptor == $localizado); collectList($dios))		
		not(Localiza(sujeto == $mortal, receptor == $localizado))
	then
		insert(new Localiza($mortal, $localizado));
		System.out.println("Por tener el favor de " +
			$dios1.getNombre() + ", " + ((Dios)$dioses.get(0)).getNombre() + "  y " + ((Dios)$dioses.get(1)).getNombre() + ", " + $mortal.getNombre() + " ha localizado a " +
			$localizado.getNombre());
end

// Especificacion para el Minotauro para la regla de abajo.
rule "Si matas al Minotauro -> sus presos ahora estan apresados por Minos"
	salience 15	// Mas prioridad que la de matar y liberar por especificidad
	agenda-group "generales"
	when
		$s: Ser()
		$mata: Mata(sujeto == $s, $asesinado: receptor)
		$prision: Apresa(sujeto == $asesinado, $apresado: receptor)
		$minotauro: CriaturaMitologica(nombre == "Minotauro", muerto, $minotauro == $s)
		$minos: Semidios(nombre == "Minos") 
	then
		delete($prision);
		Apresa apresa = new Apresa($minos, $apresado);
		insert(apresa);
		System.out.println($mata.toString() + ", por lo que " + apresa.toString());
end

rule "Si matas a alguien -> liberas a sus prisioneros"
	salience 10
	agenda-group "generales"
	when
		$s: Ser()
		$mata: Mata(sujeto == $s, $asesinado: receptor)
		$prision: Apresa(sujeto == $asesinado, $apresado: receptor)
	then
		Libera libera = new Libera($s, $apresado);
		insert(libera);
		delete($prision);
		System.out.println($mata.toString() + ", por lo que " + libera.toString());
end

// Especificaci칩n de la de matar para el Minotauro. Le a침ado m치s prioridad para que se cumpla siempre antes que la otra.

rule "Si un heroe tiene las debilidades del Minotauro, esta apresado por Minos y lo localiza -> mata al Minotauro"
	salience 15
	agenda-group "generales"
	when
		$criatura: Criatura(nombre == "Minotauro", !muerto)
		$heroe: Heroe(!muerto)
		$localiza: Localiza(sujeto == $heroe, receptor == $criatura)
		Debil(sujeto == $criatura) // Que al menos tenga una debilidad.
		not(Debil(sujeto == $criatura, $cap:= capacidad) and
			not(
				Domina(sujeto == $heroe, capacidad == $cap)
				or
				(Posee(sujeto == $heroe, $obj:= objeto) and Domina(objeto == $obj, capacidad == $cap))
				or
				(Doma(sujeto == $heroe, $domado:= receptor) and Domina(sujeto == $domado, capacidad == $cap))
			)
		)
		$minos: Semidios(nombre == "Minos")
		Apresa(sujeto == $minos, receptor == $heroe)
	then
		modify($criatura){setMuerto(true);}
		Mata mata = new Mata($heroe, $criatura);
		insert(mata);
		System.out.println($localiza.toString() + " y domina todas sus debilidades, por lo que " + mata.toString());	
end

rule "Si un heroe tiene las debilidades de una criatura con debilidades y la localiza -> la mata"
	salience 10
	agenda-group "generales"
	when
		$criatura: Criatura(!muerto, nombre != "Minotauro")
		$heroe: Heroe(!muerto)
		$localiza: Localiza(sujeto == $heroe, receptor == $criatura)
		Debil(sujeto == $criatura) // Que al menos tenga una debilidad.
		not(Debil(sujeto == $criatura, $cap:= capacidad) and
			not(
				Domina(sujeto == $heroe, capacidad == $cap)
				or
				(Posee(sujeto == $heroe, $obj:= objeto) and Domina(objeto == $obj, capacidad == $cap))
				or
				(Doma(sujeto == $heroe, $domado:= receptor) and Domina(sujeto == $domado, capacidad == $cap))
			)
		)
	then
		modify($criatura){setMuerto(true);}
		Mata mata = new Mata($heroe, $criatura);
		insert(mata);
		System.out.println($localiza.toString() + " y domina todas sus debilidades, por lo que " + mata.toString());	
end

// *************************************************************** //

rule "Poseidon enojado con Casiopea -> Poseidon libera a Ceto"
	salience 5
	agenda-group "generales"
    when
        $pos: DiosMayor(nombre == "Poseidon", !muerto)
        $casiopea: Mortal(nombre == "Casiopea", !muerto)
        $enojadoPos: Enojado(sujeto == $pos, receptor == $casiopea)
        $criaturaMarina: CriaturaMitologica(tipo == TipoCriatura.MARINA, !muerto)
        $apres: Apresa(sujeto == $pos, receptor == $criaturaMarina)
       	$otraCriatura: CriaturaMitologica(!muerto) and not(Libera(sujeto == $pos, receptor == $otraCriatura))
    then
        delete($apres);
        Libera libera = new Libera($pos, $criaturaMarina);
        insert(libera);
		System.out.println($enojadoPos.toString() + ", por lo que " + libera.toString()); 
end

rule "Poseid칩n ha liberado una criatura marina y enojado con Casiopea -> la criatura marina apresa a su hijo"
	salience 5
	agenda-group "generales"
	when
		$pos: DiosMayor(nombre == "Poseidon", !muerto)
		$criatura: CriaturaMitologica(tipo == TipoCriatura.MARINA, !muerto)
		Libera(sujeto == $pos, receptor == $criatura)
        $casiopea: Mortal(nombre == "Casiopea", !muerto)
        $enojo: Enojado(sujeto == $pos, receptor == $casiopea)
        $hijo: Ser(!muerto) and Padre(sujeto == $casiopea, receptor == $hijo)
        not(Apresa(receptor == $hijo))
	then
		Apresa apresa = new Apresa($criatura, $hijo);
		insert(apresa);
		System.out.println($enojo.toString() + ", por lo que " + apresa.toString());
end

/*
rule "x tiene un objeto con una capacidad"
	salience 29
	agenda-group "generales"
	when
		$ser: Ser()
		$capacidad: Capacidad()
		Domina($ser == sujeto, $capacidad == capacidad) or (Posee($ser == sujeto , $obj:= objeto) and Domina(objeto == $obj, $capacidad == capacidad))
	then
		System.out.println($ser.toString() + " tiene capacidad " + $capacidad.toString()); 
end
*/

rule "x Localiza a las Grayas y Grayas localiza a alguien que no localiza x -> x roba ojo"
	salience 5
	agenda-group "generales"
	when
		$h: Heroe(!muerto)
		$invisibilidad: Capacidad(nombre == "Invisibilidad")
		
		(
			Domina(sujeto == $h, capacidad == $invisibilidad) 
			or 
			(Posee(sujeto == $h, $obj:= objeto) and Domina(objeto == $obj, capacidad == $invisibilidad))
		)
		
		$grayas: DiosMenor(nombre == "Grayas")
		$localiza: Localiza(sujeto == $h, receptor == $grayas)
		$ojo: Objeto(nombre == "OjoGrayas")
		$poseenOjoGrayas: Posee(sujeto == $grayas, objeto == $ojo)
		Localiza(sujeto == $grayas, $alguien:= receptor) and not(Localiza(sujeto == $h, receptor == $alguien))
	then
		insert(new Posee($h, $ojo));
		delete($poseenOjoGrayas);
		System.out.println($localiza.toString() + ", por lo que " +
			$h.toString() + " ha robado a " + $grayas.toString() + " " + $ojo.toString());
end

rule "x devuelve ojo a las Grayas -> x tiene localizados los que localizan las Grayas"
	salience 5
	agenda-group "generales"
	when
		$ojo: Objeto(nombre == "OjoGrayas")
		$grayas: DiosMenor(nombre == "Grayas", !muerto)
		$h: Heroe(!muerto)
		Localiza(sujeto == $grayas, $localizado:= receptor)
		$poseeHeroeOjo:= Posee(sujeto == $h, objeto == $ojo)
	then
		insert(new Posee($grayas, $ojo));
		delete($poseeHeroeOjo);
		Localiza localiza = new Localiza($h, $localizado);
		insert(localiza);
		System.out.println($h.toString() + " devuelve a " + $grayas.toString() + " " + $ojo.toString());
		System.out.println(localiza.toString());
end

/*
rule "x tiene objetos letal, vuelo, y reflectante -> mata a Medusa"
	salience 5
	agenda-group "generales"
	when
		$h: Heroe(!muerto)
		$pos1: Posee(sujeto == $h, $ob1: objeto) and $vuelo: Vuelo(objeto == $ob1) 
		$pos2: Posee(sujeto == $h, $ob2: objeto) and $letal: Letal(objeto == $ob2) //or Corte(sujeto == $h)
		$pos3: Posee(sujeto == $h, $ob3: objeto) and $reflectante: Reflectante(objeto == $ob3)// or Reflectante(sujeto == $h)
		$medusa: CriaturaMitologica(nombre == "Medusa", !muerto)
	then
		modify($medusa){setMuerto(true);}
		Mata mata = new Mata($h, $medusa); 
		insert(mata);
		System.out.println($pos1.toString() + ", " + $pos2.toString() + " y " + $pos3.toString() + ", con " +
			$vuelo.toString() + ", " + $letal.toString() + " y " + $reflectante.toString() + ", por lo que " +
			mata.toString());
end
*/

rule "Localizadas ninfas -> consigue objetos"
	salience 5
	agenda-group "generales"
	when
		$ninfas: DiosMenor(nombre == "Ninfas", !muerto)
		$h: Heroe(!muerto) and $localiza: Localiza(sujeto == $h, receptor == $ninfas)
		$posesionNinfas: Posee(sujeto == $ninfas, $obj: objeto)
	then
		Posee posee = new Posee($h, $obj);
		insert(posee);
		delete($posesionNinfas);
		System.out.println($localiza.toString() + ", por lo que " + posee.toString());
end

/*
rule "Si Medusa ha muerto -> aparece su cabeza"
	salience 5
	agenda-group "generales"
	when
		$medusa: CriaturaMitologica(nombre == "Medusa", muerto)
		$petrificar: Capacidad(nombre == "Petrificar")
	then
		ObjetoMitologico cabezaMedusa = new ObjetoMitologico("CabezaMedusa");
		insert(cabezaMedusa);
		insert(new Domina(cabezaMedusa, $petrificar));
		//System.out.println(cabezaMedusa.toString());
end
*/

/*
rule "Tiene algo petrificante -> mata a Ceto"
	salience 5
	agenda-group "generales"
	when
		$heroe: Heroe(!muerto)
		(Posee(sujeto == $heroe, $petrificante: objeto) and Petrificar(objeto == $petrificante)) or Petrificar(sujeto == $heroe)
		$ceto: CriaturaMitologica(nombre == "Ceto", !muerto)
	then
		Mata mata = new Mata($heroe, $ceto);
		insert(mata);
		modify($ceto){setMuerto(true);}
		System.out.println(mata.toString());
end
*/

rule "Si alguien tiene la cabeza de Medusa y no tiene contenedor -> muere"
	salience 5
	agenda-group "generales"
	when
		$cabezaMedusa: ObjetoMitologico(nombre == "CabezaMedusa")
		$contenedor: Capacidad(nombre == "Contenedor")
		Posee($poseedor:= sujeto, sujeto == $cabezaMedusa)
		not(Domina(sujeto == $poseedor, capacidad == $contenedor) or
			not(Posee(sujeto == $poseedor, $obj:= objeto) and Domina(sujeto == $obj, capacidad == $contenedor))
		)
	then
		modify($poseedor){setMuerto(true);}
		System.out.println($poseedor.toString() + " no posee Contenedor, por lo que muere");
end

/*
rule "Si alguien ha matado a Medusa y tiene contenedor -> consigue su cabeza"
	salience 5
	agenda-group "generales"
	when
		$medusa: CriaturaMitologica(nombre == "Medusa", muerto)
		$cabezaMedusa: ObjetoMitologico(nombre == "CabezaMedusa")
		Mata($ser:= sujeto, receptor == $medusa)
		Contenedor($obj:= objeto) and Posee(sujeto == $ser, objeto == $obj)
	then
		Posee posee = new Posee($ser, $cabezaMedusa);
		insert(posee);
		System.out.println(posee.toString());
		//System.out.println($s.getNombre() + " consigue la cabeza de Medusa");
end
*/

// Reglas Minotauro
rule "Minos tiene favor de Poseidon -> Doma al Toro de Creta"
	salience 5
	agenda-group "generales"
	when
		$minos: Semidios(nombre == "Minos", !muerto)
		$poseidon: DiosMayor(nombre == "Poseidon")
		$toroCreta: CriaturaNormal(nombre == "ToroCreta")
		$favorece: Favorece(sujeto == $poseidon, receptor == $minos)
		not(Doma(receptor == $toroCreta))
	then
		Doma doma = new Doma($minos, $toroCreta);
		insert(doma);
		System.out.println($favorece.toString() + ", por lo que " + doma.toString());
end

rule "Si Minos tiene domado el Toro de Creta -> Poseidon se enfada con Minos"
	salience 5
	agenda-group "generales"
	when
		$minos: Semidios(nombre == "Minos", !muerto)
		$poseidon: DiosMayor(nombre == "Poseidon")
		$toroCreta: CriaturaNormal(nombre == "ToroCreta")
		$domaMinosToro: Doma(sujeto == $minos, receptor == $toroCreta)
	then
		Enojado enojoPoseMinos = new Enojado($poseidon, $minos);
		insert(enojoPoseMinos);
		System.out.println($domaMinosToro.toString() + ", por lo que " + enojoPoseMinos.toString());
end

rule "Si Poseidon se enfada con Minos y Minos doma al Toro de Creta -> Pasifae se enamora del Toro"
	salience 5
	agenda-group "generales"
	when
		$poseidon: DiosMayor(nombre == "Poseidon")
		$minos: Semidios(nombre == "Minos")
		$enojoPosMinos: Enojado(sujeto == $poseidon, receptor == $minos)
		$toroDeCreta: CriaturaNormal(nombre == "ToroCreta")
		$domado: Doma(sujeto == $minos, receptor == $toroDeCreta)
		$pasifae: Semidios(nombre == "Pasifae", !muerto)
	then
		Enamora amorPasifaeToro = new Enamora($pasifae, $toroDeCreta);
		insert(amorPasifaeToro);
		System.out.println($enojoPosMinos.toString() + " y " + $domado.toString() + ", por lo que " +
			amorPasifaeToro.toString());
end

rule "Si Pasifae se enamora del Toro de Creta -> Aparece el Minotauro con un objeto Cuerno"
	salience 5
	agenda-group "generales"
	when
		$pasifae: Semidios(nombre == "Pasifae", !muerto)
		$toroCreta: CriaturaNormal(nombre == "ToroCreta", !muerto)
		$enamorada: Enamora(sujeto == $pasifae, receptor == $toroCreta)
		$letal: Capacidad(nombre == "Letal")
	then
		CriaturaMitologica minotauro = new CriaturaMitologica("Minotauro", TipoCriatura.TERRESTRE);
		ObjetoMitologico cuernoMinotauro = new ObjetoMitologico("CuernoMinotauro");
		Posee posMinotCuerno = new Posee(minotauro, cuernoMinotauro);
		Debil debilMinot = new Debil(minotauro, $letal);
		insert(minotauro);
		insert(cuernoMinotauro);
		insert(posMinotCuerno);
		insert(debilMinot);
		System.out.println($enamorada.toString() + ", por lo que nace el " + minotauro.toString());
end

rule "Si Minotauro esta libre e Icaro y Dedalo estan vivos -> Minos Apresa al Minotauro"
	salience 5
	agenda-group "generales"
	when
		$minotauro: CriaturaMitologica(nombre == "Minotauro", !muerto) and not(Apresa(receptor == $minotauro))
		$minos: Semidios(nombre == "Minos", !muerto)
		$icaro: Humano(nombre == "Icaro", !muerto) and not(Apresa(receptor == $icaro))
		$dedalo: Humano(nombre == "Dedalo", !muerto) and not(Apresa(receptor == $dedalo))
	then
		Apresa minosApresaMinot = new Apresa($minos, $minotauro);
		insert(minosApresaMinot);
		System.out.println($dedalo.toString() + " construye el Laberinto de Creta");
		System.out.println(minosApresaMinot.toString() + " en el Laberinto de Creta");
end

rule "Si Ariadna esta enamorada de un heroe -> le da sus objetos"
	salience 5
	agenda-group "generales"
	when
		$ariadna: Mortal(nombre == "Ariadna", !muerto)
		$heroe: Heroe(!muerto)
		$enamorada: Enamora(sujeto == $ariadna, receptor == $heroe)
		$poseeAriadna: Posee(sujeto == $ariadna, $objeto:= objeto)
	then
		delete($poseeAriadna);
		Posee poseeHeroe = new Posee($heroe, $objeto);
		insert(poseeHeroe);
		System.out.println($enamorada.toString() + ", por lo que le entrega " + $objeto.toString());
end

rule "Si un heroe tiene invisibilidad y conoce la localizacion de Ariadna -> Ariadna se enamora del heroe"
	salience 5
	agenda-group "generales"
	when
		$heroe: Heroe(!muerto)
		
		$invisibilidad: Capacidad(nombre == "Invisibilidad")
		(
			Domina(sujeto == $heroe, capacidad == $invisibilidad)
			or
			(Posee(sujeto == $heroe, $obj:= objeto) and Domina(objeto == $obj, capacidad == $invisibilidad))
			or
			(Doma(sujeto == $heroe, $criatura:= receptor) and Domina(sujeto == $criatura, capacidad == $invisibilidad))
		)

		$ariadna: Mortal(nombre == "Ariadna", !muerto)
		$localiza: Localiza(sujeto == $heroe, receptor == $ariadna)
		not(Enamora(sujeto == $ariadna, receptor == $heroe))	// No se va a enamorar dos veces
	then
		Enamora enamAriadnaHeroe = new Enamora($ariadna, $heroe);
		insert(enamAriadnaHeroe);
		System.out.println($localiza.toString() + " y se vuelve invisible y se entera de los gustos"
			+ " de " + $ariadna.toString() + ", por lo que " + enamAriadnaHeroe.toString());
end

rule "Si Ariadna se enamora de alguien -> Minos se enfada con el"
	salience 5
	agenda-group "generales"
	when
		$ariadna: Mortal(nombre == "Ariadna")
		$enamorada: Enamora(sujeto == $ariadna, $amor:= receptor)
		$minos: Semidios(nombre == "Minos")
	then
		Enojado enojo = new Enojado($minos, $amor);
		insert(enojo);
		System.out.println($enamorada.toString() + ", por lo que " + enojo.toString());
end

rule "Si Minos se enfada con Mortal -> lo encierra en el laberinto y localiza Minotauro"
	salience 5
	agenda-group "generales"
	when
		$minos: Semidios(nombre == "Minos", !muerto)
		$minotauro: CriaturaMitologica(nombre == "Minotauro") 
		Apresa(sujeto == $minos, receptor == $minotauro)
		$enojo: Enojado(sujeto == $minos, $mortal:= receptor)
		not(Apresa(receptor == $mortal))	// Comprobar que no estaba apresado previamente.
	then
		delete($enojo);
		Apresa apresaMinosMortal = new Apresa($minos, $mortal);
		Localiza localizaMortalMinot = new Localiza($mortal, $minotauro);
		insert(apresaMinosMortal);
		insert(localizaMortalMinot);
		System.out.println($minos.toString() + " ha encerrado a " + $mortal.toString() +
			" en el laberinto");	
end

rule "Si estas Apresado por Minos y el Minotauro esta vivo y no puedes matarlo -> Te apresa"
	salience 5
	agenda-group "generales"
	when
		$minos: Semidios(nombre == "Minos")
		$minotauro: CriaturaMitologica(nombre == "Minotauro", !muerto)
		$apresado: Apresa(sujeto == $minos, $ser:= receptor, $ser != $minotauro)
		
		// Hay una debilidad del Minotauro que no domina
		(
			Debil(sujeto == $minotauro, $cap:= capacidad)
			and
			not(
				Domina(sujeto == $ser, capacidad == $cap)
				or
				(
					Posee(sujeto == $ser, $obj:= objeto)
					and
					Domina(objeto == $obj, capacidad == $cap)
				)
			)
		) 
	then
		delete($apresado);
		Apresa apresaMinotauro = new Apresa($minotauro, $ser);
		insert(apresaMinotauro);
		System.out.println($ser.toString() + " esta en el laberinto y no puede matar a " + $minotauro.toString() +
			", por lo que " + apresaMinotauro.toString()); 
end

///////////////////////////// PRUEBA
rule "Si el Minotauro muere -> Minos se enfada con un random"
	salience 5
	agenda-group "generales"
	when
		$minotauro: CriaturaMitologica(nombre == "Minotauro", muerto)
		$minos: Semidios(nombre == "Minos")
		not(Apresa(sujeto == $minos, receptor != $minotauro))
		$random: Ser(nombre == "ChicoRandom" || nombre == "ChicoRandom2")
		not(Apresa(receptor == $random))
	then
		Enojado enojo = new Enojado($minos, $random);
		insert(enojo);
		System.out.println(enojo.toString());
end

/*
rule "Si estas Apresado por Minos y el Minotauro esta vivo y puedes matarlo -> lo matas"
	salience 5
	agenda-group "generales"
	when
		$minos: Semidios(nombre == "Minos")
		$minotauro: CriaturaMitologica(nombre == "Minotauro", !muerto)
		$apresado: Apresa(sujeto == $minos, $ser:= receptor, $ser != $minotauro)
		Localiza(sujeto == $ser, receptor == $minotauro)
		(Letal(sujeto == $ser) or 
			(Posee(sujeto == $ser, $obj:= objeto) and Letal(objeto == $obj)))
	then
		Mata mataMinotauro = new Mata($ser, $minotauro);
		insert(mataMinotauro);
		modify($minotauro){setMuerto(true);}
		System.out.println($ser.toString() + " esta en el laberinto y " + mataMinotauro.toString()); 
end
*/

rule "Si estas apresado por Minos, Minotauro muerto, tienes imperdible y otro encerrado -> se va el encerrado"
	salience 10
	agenda-group "generales"
	when
		$serImperdible: Ser()
		$imperdible: Capacidad(nombre == "Imperdible")
		(
			Domina(sujeto == $serImperdible, capacidad == $imperdible)
			or
			(
				Posee(sujeto == $serImperdible, $obj:= objeto)
				and
				Domina(objeto == $obj, capacidad == $imperdible)
			)
		)
		$minos: Semidios(nombre == "Minos")
		$minotauro: CriaturaMitologica(nombre == "Minotauro", muerto)
			//or
		//not(CriaturaMitologica(nombre == "Minotauro", !muerto))
		
		Apresa(sujeto == $minos, receptor == $serImperdible)
		// Hay otro apresado (diferente al serImperdible o al Minotauro)
		$apresaMinosOtro: Apresa(sujeto == $minos, receptor not in ($minotauro, $serImperdible), $otroEncerrado:= receptor)
	then
		delete($apresaMinosOtro);
		Libera libSerOtro = new Libera($serImperdible, $otroEncerrado);
		insert(libSerOtro);
		System.out.println($serImperdible.toString() + " consigue que " + $otroEncerrado.toString() + " salga del laberinto");
		System.out.println(libSerOtro.toString());
end

rule "Si estas apresado por Minos, Minotauro muerto, tienes imperdible y no hay otro encerrado -> te vas. Si Icaro y Dedalo vivos -> Minos enojado"
	salience 10
	agenda-group "generales"
	when
		$serImperdible: Ser()
		$imperdible: Capacidad(nombre == "Imperdible")
		(
			Domina(sujeto == $serImperdible, capacidad == $imperdible)
			or
			(
				Posee(sujeto == $serImperdible, $obj:= objeto)
				and
				Domina(objeto == $obj, capacidad == $imperdible)
			)
		)
		$minos: Semidios(nombre == "Minos")
		
		$minotauro: CriaturaMitologica(nombre == "Minotauro", muerto)
		//	or
		//not(CriaturaMitologica(nombre == "Minotauro", !muerto))
		
		$apresadoImperdible: Apresa(sujeto == $minos, receptor == $serImperdible)
		// No hay otro apresado (que no sea el serImperdible o el Minotauro)
		not(Apresa(sujeto == $minos, receptor not in ($minotauro, $serImperdible)))
		$icaro: Humano(nombre == "Icaro", !muerto)
		$dedalo: Humano(nombre == "Dedalo", !muerto)
	then
		insert(new Enojado($minos, $dedalo));
		insert(new Enojado($minos, $icaro));
		delete($apresadoImperdible);
		System.out.println($serImperdible.toString() + " ha conseguido salir del laberinto");
end

rule "Si estas apresado por Minos, Minotauro muerto, tienes imperdible y no hay otro encerrado -> te vas."
	salience 10
	agenda-group "generales"
	when
		$serImperdible: Ser()
		$imperdible: Capacidad(nombre == "Imperdible")
		(
			Domina(sujeto == $serImperdible, capacidad == $imperdible)
			or
			(
				Posee(sujeto == $serImperdible, $obj:= objeto)
				and
				Domina(objeto == $obj, capacidad == $imperdible)
			)
		)
		$minos: Semidios(nombre == "Minos")
		
		$minotauro: CriaturaMitologica(nombre == "Minotauro", muerto)
		//	or
		//not(CriaturaMitologica(nombre == "Minotauro", !muerto))
		
		$apresadoImperdible: Apresa(sujeto == $minos, receptor == $serImperdible)
		// No hay otro apresado (que no sea el serImperdible o el Minotauro)
		not(Apresa(sujeto == $minos, receptor not in ($minotauro, $serImperdible)))
		not(
			Humano(nombre == "Icaro", !muerto)
			and
			Humano(nombre == "Dedalo", !muerto)
		)
	then
		delete($apresadoImperdible);
		System.out.println($serImperdible.toString() + " ha conseguido salir del laberinto");
end

rule "Si Dedalo esta atrapado por Minos y Minotauro muerto -> encuentra cera de abejas y plumas de ave"
	salience 5
	agenda-group "generales"
	when	
		$dedalo: Humano(nombre == "Dedalo", !muerto)
		$minos: Semidios(nombre == "Minos")
		Apresa(sujeto == $minos, receptor == $dedalo)
		not(ObjetoNormal(nombre == "CeraAbejas") and ObjetoNormal(nombre == "PlumasAve"))
	then
		ObjetoNormal ceraAbejas = new ObjetoNormal("CeraAbejas");
		ObjetoNormal plumasAve = new ObjetoNormal("PlumasAve");
		Posee dedaloCeraAbejas = new Posee($dedalo, ceraAbejas);
		Posee dedaloPlumasAve = new Posee($dedalo, plumasAve);
		insert(ceraAbejas);
		insert(plumasAve);
		insert(dedaloCeraAbejas);
		insert(dedaloPlumasAve);
		System.out.println($dedalo.toString() + " encuentra en el laberinto " +
			ceraAbejas.toString() + " y " + plumasAve.toString());
end

rule "Si Dedalo tiene cera y plumas e Icaro atrapado"
	salience 5
	agenda-group "generales"
	when
		$cera: ObjetoNormal(nombre == "CeraAbejas")
		$plumas: ObjetoNormal(nombre == "PlumasAve")
		$dedalo: Humano(nombre == "Dedalo")
		$icaro: Humano(nombre == "Icaro")
		$minos: Semidios(nombre == "Minos")
		$vuelo: Capacidad(nombre == "Vuelo")
		Apresa(sujeto == $minos, receptor == $dedalo)
		Apresa(sujeto == $minos, receptor == $icaro)
		Posee(sujeto == $dedalo, objeto == $cera)
		Posee(sujeto == $dedalo, objeto == $plumas)
	then
		ObjetoNormal alas1 = new ObjetoNormal("AlasIcaro");
		insert(alas1);
		ObjetoNormal alas2 = new ObjetoNormal("AlasDedalo");
		insert(alas2);
		Domina volar1 = new Domina(alas1, $vuelo);
		insert(volar1);
		Domina volar2 = new Domina(alas2, $vuelo);
		insert(volar2);
		Posee posDedaloAlas = new Posee($dedalo, alas2);
		insert(posDedaloAlas);
		Posee posIcaroAlas = new Posee($icaro, alas1);
		insert(posIcaroAlas);
		System.out.println($dedalo.toString() + " ha creado " +
			alas1.toString() + " y " + alas2.toString());
		System.out.println(posDedaloAlas.toString());
		System.out.println(posIcaroAlas.toString());
end

rule "Si Dedalo tiene capacidad Vuelo y encerrado por Minos -> deja de estar encerrado"
	salience 5
	agenda-group "generales"
	when
		$dedalo: Humano(nombre == "Dedalo", !muerto)
		$vuelo: Capacidad(nombre == "Vuelo")
		(
			Domina(sujeto == $dedalo, capacidad == $vuelo)
			or
			(
				Posee(sujeto == $dedalo, $obj:= objeto)
				and
				Domina(objeto == $obj, capacidad == $vuelo)
			)
			or
			(
				Doma(sujeto == $dedalo, $domado:= receptor)
				and
				Domina(sujeto == $domado, capacidad == $vuelo)
			)
		)
		
		$minos: Semidios(nombre == "Minos")
		$apresado: Apresa(sujeto == $minos, receptor == $dedalo)
	then
		delete($apresado);
		System.out.println($dedalo.toString() + " escapa volando del laberinto");
end

rule "Si Icaro tiene capacidad Vuelo y encerrado por Minos -> deja de estar encerrado pero muere"
	salience 5
	agenda-group "generales"
	when
		$icaro: Humano(nombre == "Icaro", !muerto)
		
		$vuelo: Capacidad(nombre == "Vuelo")
		(
			Domina(sujeto == $icaro, capacidad == $vuelo)
			or
			(
				Posee(sujeto == $icaro, $obj:= objeto)
				and
				Domina(objeto == $obj, capacidad == $vuelo)
			)
			or
			(
				Doma(sujeto == $icaro, $domado:= receptor)
				and
				Domina(sujeto == $domado, capacidad == $vuelo)
			)
		)
		
		$minos: Semidios(nombre == "Minos")
		$apresado: Apresa(sujeto == $minos, receptor == $icaro)
	then
		delete($apresado);
		modify($icaro){setMuerto(true);}
		System.out.println($icaro.toString() + " escapa volando del laberinto");
		System.out.println($icaro.toString() + " ha volado muy alto, por lo que el sol derrite la cera"
			+ " de sus alas y muere");
end

/*
// Para intercalar mitos
rule "Si has liberado a Andromeda, Zeus te dice donde esta Ariadna"
	salience 5
	agenda-group "generales"
	when
		$s: Ser(!muerto)
		$andromeda: Mortal(nombre == "Andromeda", !muerto)
		$libera: Libera(sujeto == $s, receptor == $andromeda)
		$ariadna: Humano(nombre == "Ariadna")
	then
		Localiza localiza = new Localiza($s, $ariadna);
		insert(localiza);
		System.out.println($libera.toString() + ", por lo que Zeus le da la localizacion de " + $ariadna.toString());
end
*/